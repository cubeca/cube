version: '3.9'

services:

  frontend:
    container_name: ${PROJECT_NAME}_frontend
    image: ${PROJECT_NAME}_frontend
    build:
      context: ./client/
      dockerfile: editable.dockerfile
    entrypoint: ["/bin/sh", "-c", "npm run local_dev_docker_compose"]
    depends_on:
      - bff
    networks:
      - public_bff_net
    environment:
      NODE_ENV: ${NODE_ENV}
      GENERATE_SOURCEMAP: ${GENERATE_SOURCEMAP}
      PORT: ${PORT}
      REACT_APP_CLOUDFLARE_SERVICE_URL: http://localhost:${BFF_PORT}
      # REACT_APP_CLOUDFLARE_SERVICE_URL: http://localhost:${CLOUDFLARE_PORT}
      REACT_APP_CONTENT_SERVICE_URL: http://localhost:${BFF_PORT}
      REACT_APP_AUTH_SERVICE_URL: http://localhost:${BFF_PORT}
      REACT_APP_PROFILE_SERVICE_URL: http://localhost:${BFF_PORT}

      # Will replace REACT_APP_*_SERVICE_URL after introduction of the BFF gateway.
      API_URL: http://localhost:${BFF_PORT}
    volumes:
      - ./${ENV_FILE}:/work/.env
      - ./client/.env.example:/work/.env.example
      - ./client/.eslintignore:/work/.eslintignore
      - ./client/.eslintrc.json:/work/.eslintrc.json
      - ./client/.prettierignore:/work/.prettierignore
      - ./client/.prettierrc:/work/.prettierrc
      - ./client/package.json:/work/package.json
      - ./client/package-lock.json:/work/package-lock.json
      - ./client/tsconfig.json:/work/tsconfig.json
      - ./client/serve.json:/work/serve.json
      - ./client/public:/work/public/
      - ./client/scripts:/work/scripts/
      - ./client/src:/work/src/
    ports:
      # Serve the Frontend on the host
      - '${PORT}:${PORT}'


  bff:
    container_name: ${PROJECT_NAME}_bff
    image: ${PROJECT_NAME}_bff
    build:
      context: ./services/bff/
      dockerfile: editable.dockerfile
    entrypoint: ["/bin/sh", "-c", "npm run local_dev_docker_compose"]
    depends_on:
      - cloudflare
      - content
      - identity
      - profile
    networks:
      - public_bff_net
      - cloudflare_net
      - content_net
      - identity_net
      - profile_net
    environment:
      PORT: ${BFF_PORT}
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}

      CLOUDFLARE_SERVICE_URL: http://cloudflare:${CLOUDFLARE_PORT}
      CONTENT_SERVICE_URL: http://content:${CONTENT_PORT}
      IDENTITY_SERVICE_URL: http://identity:${IDENTITY_PORT}
      PROFILE_SERVICE_URL: http://profile:${PROFILE_PORT}
    volumes:
      - ./services/bff/.env.example:/work/.env.example
      - ./services/bff/src:/work/src/
      - ./services/bff/package-lock.json:/work/package-lock.json
      - ./services/bff/package.json:/work/package.json
      - ./services/bff/tsconfig.json:/work/tsconfig.json
    ports:
      # Serve the BFF on the host
      - '${BFF_PORT}:${BFF_PORT}'


  cloudflare:
    container_name: ${PROJECT_NAME}_cloudflare
    image: ${PROJECT_NAME}_cloudflare
    build:
      context: ./services/cloudflare/
      dockerfile: editable.dockerfile
    entrypoint: ["/bin/sh", "-c", "npm run local_dev_docker_compose"]
    depends_on:
      - postgres
    networks:
      - cloudflare_net
      - db
    environment:
      PORT: ${CLOUDFLARE_PORT}
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}

      CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID}
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
      CLOUDFLARE_STREAM_CUSTOMER_SUBDOMAIN: ${CLOUDFLARE_STREAM_CUSTOMER_SUBDOMAIN}
      CLOUDFLARE_R2_ACCESS_KEY_ID: ${CLOUDFLARE_R2_ACCESS_KEY_ID}
      CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${CLOUDFLARE_R2_SECRET_ACCESS_KEY}
      CLOUDFLARE_R2_BUCKET_NAME: ${CLOUDFLARE_R2_BUCKET_NAME}
      CLOUDFLARE_R2_PUBLIC_BUCKET_BASE_URL: ${CLOUDFLARE_R2_PUBLIC_BUCKET_BASE_URL}

      PGHOST: postgres
      PGPORT: '5432'

      # See ./scripts/db_init_multiple_users.sh
      PGDATABASE: cube_cloudflare
      PGUSER: cube_cloudflare
      PGPASSWORD: cube_cloudflare
    volumes:
      - ./services/cloudflare/.env.example:/work/.env.example
      - ./services/cloudflare/migrations:/work/migrations/
      - ./services/cloudflare/src:/work/src/
      - ./services/cloudflare/database.json:/work/database.json
      - ./services/cloudflare/package-lock.json:/work/package-lock.json
      - ./services/cloudflare/package.json:/work/package.json
      - ./services/cloudflare/tsconfig.json:/work/tsconfig.json
    # ports:
    #   # Serve the cloudflare microservice on the host
    #   - '${CLOUDFLARE_PORT}:${CLOUDFLARE_PORT}'


  content:
    container_name: ${PROJECT_NAME}_content
    image: ${PROJECT_NAME}_content
    build:
      context: ./services/content/
      dockerfile: editable.dockerfile
    entrypoint: ["/bin/sh", "-c", "npm run local_dev_docker_compose"]
    depends_on:
      - postgres
    networks:
      - content_net
      - db
    environment:
      PORT: ${CONTENT_PORT}
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}

      PGHOST: postgres
      PGPORT: '5432'

      # See ./scripts/db_init_multiple_users.sh
      PGDATABASE: cube_content
      PGUSER: cube_content
      PGPASSWORD: cube_content
    volumes:
      - ./services/content/.env.example:/work/.env.example
      - ./services/content/migrations:/work/migrations/
      - ./services/content/src:/work/src/
      - ./services/content/database.json:/work/database.json
      - ./services/content/package-lock.json:/work/package-lock.json
      - ./services/content/package.json:/work/package.json
      - ./services/content/tsconfig.json:/work/tsconfig.json
    # ports:
    #   # Serve the content microservice on the host
    #   - '${CONTENT_PORT}:${CONTENT_PORT}'


  identity:
    container_name: ${PROJECT_NAME}_identity
    image: ${PROJECT_NAME}_identity
    build:
      context: ./services/identity/
      dockerfile: editable.dockerfile
    entrypoint: ["/bin/sh", "-c", "npm run local_dev_docker_compose"]
    depends_on:
      - postgres

      # TODO remove this dependency after uncoupling from profile service
      - profile
    networks:
      - identity_net
      - db

      # TODO remove this dependency after uncoupling from profile service
      - profile_net
    environment:
      PORT: ${IDENTITY_PORT}
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}

      ENCRYPT_SECRET: ${IDENTITY_PASSWORD_ENCRYPTION_SECRET}

      # TODO remove this dependency after uncoupling from profile service
      PROFILE_SERVICE_URL: http://profile:${PROFILE_PORT}

      PGHOST: postgres
      PGPORT: '5432'

      # See ./scripts/db_init_multiple_users.sh
      PGDATABASE: cube_identity
      PGUSER: cube_identity
      PGPASSWORD: cube_identity
    volumes:
      - ./services/identity/.env.example:/work/.env.example
      - ./services/identity/migrations:/work/migrations/
      - ./services/identity/src:/work/src/
      - ./services/identity/database.json:/work/database.json
      - ./services/identity/package-lock.json:/work/package-lock.json
      - ./services/identity/package.json:/work/package.json
      - ./services/identity/tsconfig.json:/work/tsconfig.json
    # ports:
    #   # Serve the identity microservice on the host
    #   - '${IDENTITY_PORT}:${IDENTITY_PORT}'


  profile:
    container_name: ${PROJECT_NAME}_profile
    image: ${PROJECT_NAME}_profile
    build:
      context: ./services/profile/
      dockerfile: editable.dockerfile
    entrypoint: ["/bin/sh", "-c", "npm run local_dev_docker_compose"]
    depends_on:
      - postgres
    networks:
      - profile_net
      - db
    environment:
      PORT: ${PROFILE_PORT}
      JWT_TOKEN_SECRET: ${JWT_TOKEN_SECRET}

      PGHOST: postgres
      PGPORT: '5432'

      # See ./scripts/db_init_multiple_users.sh
      PGDATABASE: cube_profile
      PGUSER: cube_profile
      PGPASSWORD: cube_profile
    volumes:
      - ./services/profile/.env.example:/work/.env.example
      - ./services/profile/migrations:/work/migrations/
      - ./services/profile/src:/work/src/
      - ./services/profile/database.json:/work/database.json
      - ./services/profile/package-lock.json:/work/package-lock.json
      - ./services/profile/package.json:/work/package.json
      - ./services/profile/tsconfig.json:/work/tsconfig.json
    # ports:
    #   # Serve the profile microservice on the host
    #   - '${PROFILE_PORT}:${PROFILE_PORT}'


  # For setting up multiple DBs in the same PostgreSQL Docker container, see
  # https://github.com/docker-library/docs/blob/master/postgres/README.md#initialization-scripts
  # TODO Keep those DBs separate?
  postgres:
    container_name: ${PROJECT_NAME}_db
    image: postgres:15.2-alpine3.17
    restart: always
    environment:

      # These credentials are "only" for the admin / superuser.
      # See ./scripts/db_init_multiple_users.sh for the credentials of each individual service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgres

      PGDATA: /var/lib/postgresql/data
    volumes:

      # Warning: scripts in /docker-entrypoint-initdb.d are only run if you start the container with a data directory that is empty.
      # See https://github.com/docker-library/docs/blob/master/postgres/README.md#initialization-scripts
      - ./scripts/db_init_multiple_users.sh:/docker-entrypoint-initdb.d/db_init_multiple_users.sh

      - type: volume
        source: pgdata
        target: /var/lib/postgresql/data
        volume:
          nocopy: true
    networks:
      - db
    ports:
      # Serve the DB on the host
      - '5432:5432'


volumes:
  pgdata:

networks:
  public_bff_net:
  cloudflare_net:
  content_net:
  identity_net:
  profile_net:
  db:
