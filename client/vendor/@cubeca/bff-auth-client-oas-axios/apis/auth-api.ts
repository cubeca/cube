/* tslint:disable */
/* eslint-disable */
/**
 * BFF-Auth - CUBE DAO Canada
 * # BFF-Auth (Authentication for Backend-for-Frontend)  The BFF-Auth API encapsulates authentication for the BFF. It\'s kept separate for modularity. 
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnonymousJWTRequest } from '../models';
// @ts-ignore
import { CreateUserRequest } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { JWTResponse } from '../models';
// @ts-ignore
import { LoginResponse } from '../models';
// @ts-ignore
import { UpdateEmailRequest } from '../models';
// @ts-ignore
import { UpdatePasswordRequest } from '../models';
// @ts-ignore
import { UsernameAndPasswordJWTRequest } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Acquire a JWT as an anonymous user.
         * @summary Acquire a JWT as an anonymous user.
         * @param {AnonymousJWTRequest} anonymousJWTRequest Anonymous JWT request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        anonymousJWT: async (anonymousJWTRequest: AnonymousJWTRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'anonymousJWTRequest' is not null or undefined
            assertParamExists('anonymousJWT', 'anonymousJWTRequest', anonymousJWTRequest)
            const localVarPath = `/auth/anonymous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(anonymousJWTRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger forgot password flow.
         * @summary Trigger forgot password flow.
         * @param {string} [email] The email of the user resetting their password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log user in with username and password.
         * @summary Login with username and password
         * @param {UsernameAndPasswordJWTRequest} usernameAndPasswordJWTRequest Logged-in JWT request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (usernameAndPasswordJWTRequest: UsernameAndPasswordJWTRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usernameAndPasswordJWTRequest' is not null or undefined
            assertParamExists('login', 'usernameAndPasswordJWTRequest', usernameAndPasswordJWTRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_logged_in required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usernameAndPasswordJWTRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user email.
         * @summary Update user email.
         * @param {UpdateEmailRequest} updateEmailRequest Update Email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail: async (updateEmailRequest: UpdateEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateEmailRequest' is not null or undefined
            assertParamExists('updateEmail', 'updateEmailRequest', updateEmailRequest)
            const localVarPath = `/auth/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_logged_in required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user password.
         * @summary Update user password.
         * @param {UpdatePasswordRequest} updatePasswordRequest Update Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (updatePasswordRequest: UpdatePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePasswordRequest' is not null or undefined
            assertParamExists('updatePassword', 'updatePasswordRequest', updatePasswordRequest)
            const localVarPath = `/auth/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_logged_in required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user.
         * @summary Create a new user
         * @param {CreateUserRequest} createUserRequest Creating a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: async (createUserRequest: CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('user', 'createUserRequest', createUserRequest)
            const localVarPath = `/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt_logged_in required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify user email.
         * @summary Verify user email.
         * @param {string} [uuid] The uuid of the user verifying their email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (uuid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Acquire a JWT as an anonymous user.
         * @summary Acquire a JWT as an anonymous user.
         * @param {AnonymousJWTRequest} anonymousJWTRequest Anonymous JWT request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async anonymousJWT(anonymousJWTRequest: AnonymousJWTRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.anonymousJWT(anonymousJWTRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Trigger forgot password flow.
         * @summary Trigger forgot password flow.
         * @param {string} [email] The email of the user resetting their password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Log user in with username and password.
         * @summary Login with username and password
         * @param {UsernameAndPasswordJWTRequest} usernameAndPasswordJWTRequest Logged-in JWT request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(usernameAndPasswordJWTRequest: UsernameAndPasswordJWTRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(usernameAndPasswordJWTRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update user email.
         * @summary Update user email.
         * @param {UpdateEmailRequest} updateEmailRequest Update Email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmail(updateEmailRequest: UpdateEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmail(updateEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update user password.
         * @summary Update user password.
         * @param {UpdatePasswordRequest} updatePasswordRequest Update Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(updatePasswordRequest: UpdatePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(updatePasswordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new user.
         * @summary Create a new user
         * @param {CreateUserRequest} createUserRequest Creating a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.user(createUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify user email.
         * @summary Verify user email.
         * @param {string} [uuid] The uuid of the user verifying their email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(uuid?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Acquire a JWT as an anonymous user.
         * @summary Acquire a JWT as an anonymous user.
         * @param {AnonymousJWTRequest} anonymousJWTRequest Anonymous JWT request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        anonymousJWT(anonymousJWTRequest: AnonymousJWTRequest, options?: any): AxiosPromise<JWTResponse> {
            return localVarFp.anonymousJWT(anonymousJWTRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger forgot password flow.
         * @summary Trigger forgot password flow.
         * @param {string} [email] The email of the user resetting their password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(email?: string, options?: any): AxiosPromise<string> {
            return localVarFp.forgotPassword(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Log user in with username and password.
         * @summary Login with username and password
         * @param {UsernameAndPasswordJWTRequest} usernameAndPasswordJWTRequest Logged-in JWT request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(usernameAndPasswordJWTRequest: UsernameAndPasswordJWTRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.login(usernameAndPasswordJWTRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user email.
         * @summary Update user email.
         * @param {UpdateEmailRequest} updateEmailRequest Update Email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail(updateEmailRequest: UpdateEmailRequest, options?: any): AxiosPromise<string> {
            return localVarFp.updateEmail(updateEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user password.
         * @summary Update user password.
         * @param {UpdatePasswordRequest} updatePasswordRequest Update Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(updatePasswordRequest: UpdatePasswordRequest, options?: any): AxiosPromise<string> {
            return localVarFp.updatePassword(updatePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user.
         * @summary Create a new user
         * @param {CreateUserRequest} createUserRequest Creating a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(createUserRequest: CreateUserRequest, options?: any): AxiosPromise<string> {
            return localVarFp.user(createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify user email.
         * @summary Verify user email.
         * @param {string} [uuid] The uuid of the user verifying their email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail(uuid?: string, options?: any): AxiosPromise<string> {
            return localVarFp.verifyEmail(uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * Acquire a JWT as an anonymous user.
     * @summary Acquire a JWT as an anonymous user.
     * @param {AnonymousJWTRequest} anonymousJWTRequest Anonymous JWT request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    anonymousJWT(anonymousJWTRequest: AnonymousJWTRequest, options?: AxiosRequestConfig): AxiosPromise<JWTResponse>;

    /**
     * Trigger forgot password flow.
     * @summary Trigger forgot password flow.
     * @param {string} [email] The email of the user resetting their password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    forgotPassword(email?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * Log user in with username and password.
     * @summary Login with username and password
     * @param {UsernameAndPasswordJWTRequest} usernameAndPasswordJWTRequest Logged-in JWT request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    login(usernameAndPasswordJWTRequest: UsernameAndPasswordJWTRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponse>;

    /**
     * Update user email.
     * @summary Update user email.
     * @param {UpdateEmailRequest} updateEmailRequest Update Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    updateEmail(updateEmailRequest: UpdateEmailRequest, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * Update user password.
     * @summary Update user password.
     * @param {UpdatePasswordRequest} updatePasswordRequest Update Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    updatePassword(updatePasswordRequest: UpdatePasswordRequest, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * Creates a new user.
     * @summary Create a new user
     * @param {CreateUserRequest} createUserRequest Creating a new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    user(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * Verify user email.
     * @summary Verify user email.
     * @param {string} [uuid] The uuid of the user verifying their email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    verifyEmail(uuid?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * Acquire a JWT as an anonymous user.
     * @summary Acquire a JWT as an anonymous user.
     * @param {AnonymousJWTRequest} anonymousJWTRequest Anonymous JWT request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public anonymousJWT(anonymousJWTRequest: AnonymousJWTRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).anonymousJWT(anonymousJWTRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger forgot password flow.
     * @summary Trigger forgot password flow.
     * @param {string} [email] The email of the user resetting their password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public forgotPassword(email?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgotPassword(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Log user in with username and password.
     * @summary Login with username and password
     * @param {UsernameAndPasswordJWTRequest} usernameAndPasswordJWTRequest Logged-in JWT request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(usernameAndPasswordJWTRequest: UsernameAndPasswordJWTRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(usernameAndPasswordJWTRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user email.
     * @summary Update user email.
     * @param {UpdateEmailRequest} updateEmailRequest Update Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public updateEmail(updateEmailRequest: UpdateEmailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).updateEmail(updateEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user password.
     * @summary Update user password.
     * @param {UpdatePasswordRequest} updatePasswordRequest Update Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public updatePassword(updatePasswordRequest: UpdatePasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).updatePassword(updatePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new user.
     * @summary Create a new user
     * @param {CreateUserRequest} createUserRequest Creating a new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public user(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).user(createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify user email.
     * @summary Verify user email.
     * @param {string} [uuid] The uuid of the user verifying their email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public verifyEmail(uuid?: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).verifyEmail(uuid, options).then((request) => request(this.axios, this.basePath));
    }
}
