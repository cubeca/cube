/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ContentDetailsResponse } from '../models';
import { ListOfCollaborators } from '../models';
import { ListOfContent } from '../models';
/**
 * ContentApi - axios parameter creator
 * @export
 */
export declare const ContentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List collaborators.
     * @summary List collaborators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collaboratorList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get content details.
     * @summary Get content details
     * @param {string} contentId Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentDetails: (contentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List content.
     * @summary List content
     * @param {number} page Page number
     * @param {number} pageSize Number of items on a page
     * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
     * @param {'video' | 'audio' | 'pdf'} [type] Content type
     * @param {'CA'} [nation] Related to Nation/Country
     * @param {string} [creator] Created by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentList: (page: number, pageSize: number, category?: 'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured', type?: 'video' | 'audio' | 'pdf', nation?: 'CA', creator?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ContentApi - functional programming interface
 * @export
 */
export declare const ContentApiFp: (configuration?: Configuration) => {
    /**
     * List collaborators.
     * @summary List collaborators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collaboratorList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfCollaborators>>;
    /**
     * Get content details.
     * @summary Get content details
     * @param {string} contentId Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentDetails(contentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentDetailsResponse>>;
    /**
     * List content.
     * @summary List content
     * @param {number} page Page number
     * @param {number} pageSize Number of items on a page
     * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
     * @param {'video' | 'audio' | 'pdf'} [type] Content type
     * @param {'CA'} [nation] Related to Nation/Country
     * @param {string} [creator] Created by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentList(page: number, pageSize: number, category?: 'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured', type?: 'video' | 'audio' | 'pdf', nation?: 'CA', creator?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfContent>>;
};
/**
 * ContentApi - factory interface
 * @export
 */
export declare const ContentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List collaborators.
     * @summary List collaborators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collaboratorList(options?: any): AxiosPromise<ListOfCollaborators>;
    /**
     * Get content details.
     * @summary Get content details
     * @param {string} contentId Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentDetails(contentId: string, options?: any): AxiosPromise<ContentDetailsResponse>;
    /**
     * List content.
     * @summary List content
     * @param {number} page Page number
     * @param {number} pageSize Number of items on a page
     * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
     * @param {'video' | 'audio' | 'pdf'} [type] Content type
     * @param {'CA'} [nation] Related to Nation/Country
     * @param {string} [creator] Created by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentList(page: number, pageSize: number, category?: 'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured', type?: 'video' | 'audio' | 'pdf', nation?: 'CA', creator?: string, options?: any): AxiosPromise<ListOfContent>;
};
/**
 * ContentApi - interface
 * @export
 * @interface ContentApi
 */
export interface ContentApiInterface {
    /**
     * List collaborators.
     * @summary List collaborators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    collaboratorList(options?: AxiosRequestConfig): AxiosPromise<ListOfCollaborators>;
    /**
     * Get content details.
     * @summary Get content details
     * @param {string} contentId Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentDetails(contentId: string, options?: AxiosRequestConfig): AxiosPromise<ContentDetailsResponse>;
    /**
     * List content.
     * @summary List content
     * @param {number} page Page number
     * @param {number} pageSize Number of items on a page
     * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
     * @param {'video' | 'audio' | 'pdf'} [type] Content type
     * @param {'CA'} [nation] Related to Nation/Country
     * @param {string} [creator] Created by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentList(page: number, pageSize: number, category?: 'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured', type?: 'video' | 'audio' | 'pdf', nation?: 'CA', creator?: string, options?: AxiosRequestConfig): AxiosPromise<ListOfContent>;
}
/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export declare class ContentApi extends BaseAPI implements ContentApiInterface {
    /**
     * List collaborators.
     * @summary List collaborators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    collaboratorList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListOfCollaborators, any>>;
    /**
     * Get content details.
     * @summary Get content details
     * @param {string} contentId Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    contentDetails(contentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ContentDetailsResponse, any>>;
    /**
     * List content.
     * @summary List content
     * @param {number} page Page number
     * @param {number} pageSize Number of items on a page
     * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
     * @param {'video' | 'audio' | 'pdf'} [type] Content type
     * @param {'CA'} [nation] Related to Nation/Country
     * @param {string} [creator] Created by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    contentList(page: number, pageSize: number, category?: 'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured', type?: 'video' | 'audio' | 'pdf', nation?: 'CA', creator?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListOfContent, any>>;
}
