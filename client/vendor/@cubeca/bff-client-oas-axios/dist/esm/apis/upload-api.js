/* tslint:disable */
/* eslint-disable */
/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get S3 / R2 presigned url from Cloudflare
         * @summary Get S3 / R2 presigned url from Cloudflare
         * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesViaPresignedUrl: (s3PresignedURLRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 's3PresignedURLRequest' is not null or undefined
            assertParamExists('uploadFilesViaPresignedUrl', 's3PresignedURLRequest', s3PresignedURLRequest);
            const localVarPath = `/upload/s3-presigned-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(s3PresignedURLRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
         * @summary TUS \"endpoint\" to upload URL from Cloudflare
         * @param {string} uploadLength Upload Length
         * @param {string} [uploadMetadata] Upload Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVideoTusEndpoint: (uploadLength, uploadMetadata, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uploadLength' is not null or undefined
            assertParamExists('uploadVideoTusEndpoint', 'uploadLength', uploadLength);
            const localVarPath = `/upload/video-tus-reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (uploadLength != null) {
                localVarHeaderParameter['upload-length'] = String(uploadLength);
            }
            if (uploadMetadata != null) {
                localVarHeaderParameter['upload-metadata'] = String(uploadMetadata);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function (configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration);
    return {
        /**
         * Get S3 / R2 presigned url from Cloudflare
         * @summary Get S3 / R2 presigned url from Cloudflare
         * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesViaPresignedUrl(s3PresignedURLRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.uploadFilesViaPresignedUrl(s3PresignedURLRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
         * @summary TUS \"endpoint\" to upload URL from Cloudflare
         * @param {string} uploadLength Upload Length
         * @param {string} [uploadMetadata] Upload Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVideoTusEndpoint(uploadLength, uploadMetadata, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.uploadVideoTusEndpoint(uploadLength, uploadMetadata, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UploadApiFp(configuration);
    return {
        /**
         * Get S3 / R2 presigned url from Cloudflare
         * @summary Get S3 / R2 presigned url from Cloudflare
         * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesViaPresignedUrl(s3PresignedURLRequest, options) {
            return localVarFp.uploadFilesViaPresignedUrl(s3PresignedURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
         * @summary TUS \"endpoint\" to upload URL from Cloudflare
         * @param {string} uploadLength Upload Length
         * @param {string} [uploadMetadata] Upload Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVideoTusEndpoint(uploadLength, uploadMetadata, options) {
            return localVarFp.uploadVideoTusEndpoint(uploadLength, uploadMetadata, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * Get S3 / R2 presigned url from Cloudflare
     * @summary Get S3 / R2 presigned url from Cloudflare
     * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    uploadFilesViaPresignedUrl(s3PresignedURLRequest, options) {
        return UploadApiFp(this.configuration).uploadFilesViaPresignedUrl(s3PresignedURLRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
     * @summary TUS \"endpoint\" to upload URL from Cloudflare
     * @param {string} uploadLength Upload Length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    uploadVideoTusEndpoint(uploadLength, uploadMetadata, options) {
        return UploadApiFp(this.configuration).uploadVideoTusEndpoint(uploadLength, uploadMetadata, options).then((request) => request(this.axios, this.basePath));
    }
}
