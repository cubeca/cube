/* tslint:disable */
/* eslint-disable */
/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Update Profile audio description.
         * @summary Update Profile audio description
         * @param {string} profileId Profile ID
         * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileAudioDescriptionUpdate: (profileId, updateProfileAudioDescriptionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('profileAudioDescriptionUpdate', 'profileId', profileId);
            // verify required parameter 'updateProfileAudioDescriptionRequest' is not null or undefined
            assertParamExists('profileAudioDescriptionUpdate', 'updateProfileAudioDescriptionRequest', updateProfileAudioDescriptionRequest);
            const localVarPath = `/profiles/{profileId}/update-audio-description`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileAudioDescriptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get profile details.
         * @summary Get profile details
         * @param {string} profileId Profile ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileDetails: (profileId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('profileDetails', 'profileId', profileId);
            const localVarPath = `/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Profile logo.
         * @summary Update Profile logo
         * @param {string} profileId Profile ID
         * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileLogoUpdate: (profileId, updateProfileLogoRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('profileLogoUpdate', 'profileId', profileId);
            // verify required parameter 'updateProfileLogoRequest' is not null or undefined
            assertParamExists('profileLogoUpdate', 'updateProfileLogoRequest', updateProfileLogoRequest);
            const localVarPath = `/profiles/{profileId}/update-logo`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileLogoRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Profile section.
         * @summary Update Profile section
         * @param {string} profileId Profile ID
         * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileSectionUpdate: (profileId, updateProfileSectionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('profileSectionUpdate', 'profileId', profileId);
            // verify required parameter 'updateProfileSectionRequest' is not null or undefined
            assertParamExists('profileSectionUpdate', 'updateProfileSectionRequest', updateProfileSectionRequest);
            const localVarPath = `/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileSectionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration);
    return {
        /**
         * Update Profile audio description.
         * @summary Update Profile audio description
         * @param {string} profileId Profile ID
         * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Get profile details.
         * @summary Get profile details
         * @param {string} profileId Profile ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileDetails(profileId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileDetails(profileId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update Profile logo.
         * @summary Update Profile logo
         * @param {string} profileId Profile ID
         * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileLogoUpdate(profileId, updateProfileLogoRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileLogoUpdate(profileId, updateProfileLogoRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         * Update Profile section.
         * @summary Update Profile section
         * @param {string} profileId Profile ID
         * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileSectionUpdate(profileId, updateProfileSectionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileSectionUpdate(profileId, updateProfileSectionRequest, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProfileApiFp(configuration);
    return {
        /**
         * Update Profile audio description.
         * @summary Update Profile audio description
         * @param {string} profileId Profile ID
         * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options) {
            return localVarFp.profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get profile details.
         * @summary Get profile details
         * @param {string} profileId Profile ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileDetails(profileId, options) {
            return localVarFp.profileDetails(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Profile logo.
         * @summary Update Profile logo
         * @param {string} profileId Profile ID
         * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileLogoUpdate(profileId, updateProfileLogoRequest, options) {
            return localVarFp.profileLogoUpdate(profileId, updateProfileLogoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Profile section.
         * @summary Update Profile section
         * @param {string} profileId Profile ID
         * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileSectionUpdate(profileId, updateProfileSectionRequest, options) {
            return localVarFp.profileSectionUpdate(profileId, updateProfileSectionRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * Update Profile audio description.
     * @summary Update Profile audio description
     * @param {string} profileId Profile ID
     * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options) {
        return ProfileApiFp(this.configuration).profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get profile details.
     * @summary Get profile details
     * @param {string} profileId Profile ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileDetails(profileId, options) {
        return ProfileApiFp(this.configuration).profileDetails(profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Profile logo.
     * @summary Update Profile logo
     * @param {string} profileId Profile ID
     * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileLogoUpdate(profileId, updateProfileLogoRequest, options) {
        return ProfileApiFp(this.configuration).profileLogoUpdate(profileId, updateProfileLogoRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Profile section.
     * @summary Update Profile section
     * @param {string} profileId Profile ID
     * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileSectionUpdate(profileId, updateProfileSectionRequest, options) {
        return ProfileApiFp(this.configuration).profileSectionUpdate(profileId, updateProfileSectionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
