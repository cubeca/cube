"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentApi = exports.ContentApiFactory = exports.ContentApiFp = exports.ContentApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ContentApi - axios parameter creator
 * @export
 */
const ContentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List collaborators.
         * @summary List collaborators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaboratorList: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/collaborators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get content details.
         * @summary Get content details
         * @param {string} contentId Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDetails: (contentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contentId' is not null or undefined
            (0, common_1.assertParamExists)('contentDetails', 'contentId', contentId);
            const localVarPath = `/content/{contentId}`
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List content.
         * @summary List content
         * @param {number} page Page number
         * @param {number} pageSize Number of items on a page
         * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
         * @param {'video' | 'audio' | 'pdf'} [type] Content type
         * @param {'CA'} [nation] Related to Nation/Country
         * @param {string} [creator] Created by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentList: (page, pageSize, category, type, nation, creator, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'page' is not null or undefined
            (0, common_1.assertParamExists)('contentList', 'page', page);
            // verify required parameter 'pageSize' is not null or undefined
            (0, common_1.assertParamExists)('contentList', 'pageSize', pageSize);
            const localVarPath = `/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (nation !== undefined) {
                localVarQueryParameter['nation'] = nation;
            }
            if (creator !== undefined) {
                localVarQueryParameter['creator'] = creator;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ContentApiAxiosParamCreator = ContentApiAxiosParamCreator;
/**
 * ContentApi - functional programming interface
 * @export
 */
const ContentApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ContentApiAxiosParamCreator)(configuration);
    return {
        /**
         * List collaborators.
         * @summary List collaborators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaboratorList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.collaboratorList(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get content details.
         * @summary Get content details
         * @param {string} contentId Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDetails(contentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contentDetails(contentId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List content.
         * @summary List content
         * @param {number} page Page number
         * @param {number} pageSize Number of items on a page
         * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
         * @param {'video' | 'audio' | 'pdf'} [type] Content type
         * @param {'CA'} [nation] Related to Nation/Country
         * @param {string} [creator] Created by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentList(page, pageSize, category, type, nation, creator, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.contentList(page, pageSize, category, type, nation, creator, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ContentApiFp = ContentApiFp;
/**
 * ContentApi - factory interface
 * @export
 */
const ContentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ContentApiFp)(configuration);
    return {
        /**
         * List collaborators.
         * @summary List collaborators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collaboratorList(options) {
            return localVarFp.collaboratorList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get content details.
         * @summary Get content details
         * @param {string} contentId Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDetails(contentId, options) {
            return localVarFp.contentDetails(contentId, options).then((request) => request(axios, basePath));
        },
        /**
         * List content.
         * @summary List content
         * @param {number} page Page number
         * @param {number} pageSize Number of items on a page
         * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
         * @param {'video' | 'audio' | 'pdf'} [type] Content type
         * @param {'CA'} [nation] Related to Nation/Country
         * @param {string} [creator] Created by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentList(page, pageSize, category, type, nation, creator, options) {
            return localVarFp.contentList(page, pageSize, category, type, nation, creator, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ContentApiFactory = ContentApiFactory;
/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
class ContentApi extends base_1.BaseAPI {
    /**
     * List collaborators.
     * @summary List collaborators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    collaboratorList(options) {
        return (0, exports.ContentApiFp)(this.configuration).collaboratorList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get content details.
     * @summary Get content details
     * @param {string} contentId Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    contentDetails(contentId, options) {
        return (0, exports.ContentApiFp)(this.configuration).contentDetails(contentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List content.
     * @summary List content
     * @param {number} page Page number
     * @param {number} pageSize Number of items on a page
     * @param {'all' | 'video' | 'audio' | 'vr' | 'pdf' | 'digital-publications' | 'talks' | 'performances' | 'cultural-teachings' | 'featured'} [category] Content category
     * @param {'video' | 'audio' | 'pdf'} [type] Content type
     * @param {'CA'} [nation] Related to Nation/Country
     * @param {string} [creator] Created by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    contentList(page, pageSize, category, type, nation, creator, options) {
        return (0, exports.ContentApiFp)(this.configuration).contentList(page, pageSize, category, type, nation, creator, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ContentApi = ContentApi;
