/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { S3PresignedURLRequest } from '../models';
import { S3PresignedURLResponse } from '../models';
/**
 * UploadApi - axios parameter creator
 * @export
 */
export declare const UploadApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get S3 / R2 presigned url from Cloudflare
     * @summary Get S3 / R2 presigned url from Cloudflare
     * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesViaPresignedUrl: (s3PresignedURLRequest: S3PresignedURLRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
     * @summary TUS \"endpoint\" to upload URL from Cloudflare
     * @param {string} uploadLength Upload Length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadVideoTusEndpoint: (uploadLength: string, uploadMetadata?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UploadApi - functional programming interface
 * @export
 */
export declare const UploadApiFp: (configuration?: Configuration) => {
    /**
     * Get S3 / R2 presigned url from Cloudflare
     * @summary Get S3 / R2 presigned url from Cloudflare
     * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesViaPresignedUrl(s3PresignedURLRequest: S3PresignedURLRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3PresignedURLResponse>>;
    /**
     * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
     * @summary TUS \"endpoint\" to upload URL from Cloudflare
     * @param {string} uploadLength Upload Length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadVideoTusEndpoint(uploadLength: string, uploadMetadata?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UploadApi - factory interface
 * @export
 */
export declare const UploadApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get S3 / R2 presigned url from Cloudflare
     * @summary Get S3 / R2 presigned url from Cloudflare
     * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesViaPresignedUrl(s3PresignedURLRequest: S3PresignedURLRequest, options?: any): AxiosPromise<S3PresignedURLResponse>;
    /**
     * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
     * @summary TUS \"endpoint\" to upload URL from Cloudflare
     * @param {string} uploadLength Upload Length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadVideoTusEndpoint(uploadLength: string, uploadMetadata?: string, options?: any): AxiosPromise<void>;
};
/**
 * UploadApi - interface
 * @export
 * @interface UploadApi
 */
export interface UploadApiInterface {
    /**
     * Get S3 / R2 presigned url from Cloudflare
     * @summary Get S3 / R2 presigned url from Cloudflare
     * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApiInterface
     */
    uploadFilesViaPresignedUrl(s3PresignedURLRequest: S3PresignedURLRequest, options?: AxiosRequestConfig): AxiosPromise<S3PresignedURLResponse>;
    /**
     * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
     * @summary TUS \"endpoint\" to upload URL from Cloudflare
     * @param {string} uploadLength Upload Length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApiInterface
     */
    uploadVideoTusEndpoint(uploadLength: string, uploadMetadata?: string, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export declare class UploadApi extends BaseAPI implements UploadApiInterface {
    /**
     * Get S3 / R2 presigned url from Cloudflare
     * @summary Get S3 / R2 presigned url from Cloudflare
     * @param {S3PresignedURLRequest} s3PresignedURLRequest Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    uploadFilesViaPresignedUrl(s3PresignedURLRequest: S3PresignedURLRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<S3PresignedURLResponse, any>>;
    /**
     * This (and not it\'s return value!) has to be given directly to the TUS client as it\'s `endpoint` parameter.
     * @summary TUS \"endpoint\" to upload URL from Cloudflare
     * @param {string} uploadLength Upload Length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    uploadVideoTusEndpoint(uploadLength: string, uploadMetadata?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
