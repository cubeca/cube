"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentFilesApi = exports.ContentFilesApiFactory = exports.ContentFilesApiFp = exports.ContentFilesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ContentFilesApi - axios parameter creator
 * @export
 */
const ContentFilesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Add content.
         * @summary Add content
         * @param {AddContent} addContent Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContent: (addContent, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'addContent' is not null or undefined
            (0, common_1.assertParamExists)('addContent', 'addContent', addContent);
            const localVarPath = `/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addContent, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ContentFilesApiAxiosParamCreator = ContentFilesApiAxiosParamCreator;
/**
 * ContentFilesApi - functional programming interface
 * @export
 */
const ContentFilesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ContentFilesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add content.
         * @summary Add content
         * @param {AddContent} addContent Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContent(addContent, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addContent(addContent, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ContentFilesApiFp = ContentFilesApiFp;
/**
 * ContentFilesApi - factory interface
 * @export
 */
const ContentFilesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ContentFilesApiFp)(configuration);
    return {
        /**
         * Add content.
         * @summary Add content
         * @param {AddContent} addContent Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContent(addContent, options) {
            return localVarFp.addContent(addContent, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ContentFilesApiFactory = ContentFilesApiFactory;
/**
 * ContentFilesApi - object-oriented interface
 * @export
 * @class ContentFilesApi
 * @extends {BaseAPI}
 */
class ContentFilesApi extends base_1.BaseAPI {
    /**
     * Add content.
     * @summary Add content
     * @param {AddContent} addContent Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentFilesApi
     */
    addContent(addContent, options) {
        return (0, exports.ContentFilesApiFp)(this.configuration).addContent(addContent, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ContentFilesApi = ContentFilesApi;
