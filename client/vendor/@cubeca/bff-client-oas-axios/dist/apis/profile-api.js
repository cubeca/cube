"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileApi = exports.ProfileApiFactory = exports.ProfileApiFp = exports.ProfileApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProfileApi - axios parameter creator
 * @export
 */
const ProfileApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Update Profile audio description.
         * @summary Update Profile audio description
         * @param {string} profileId Profile ID
         * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileAudioDescriptionUpdate: (profileId, updateProfileAudioDescriptionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            (0, common_1.assertParamExists)('profileAudioDescriptionUpdate', 'profileId', profileId);
            // verify required parameter 'updateProfileAudioDescriptionRequest' is not null or undefined
            (0, common_1.assertParamExists)('profileAudioDescriptionUpdate', 'updateProfileAudioDescriptionRequest', updateProfileAudioDescriptionRequest);
            const localVarPath = `/profiles/{profileId}/update-audio-description`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateProfileAudioDescriptionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get profile details.
         * @summary Get profile details
         * @param {string} profileId Profile ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileDetails: (profileId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            (0, common_1.assertParamExists)('profileDetails', 'profileId', profileId);
            const localVarPath = `/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Profile logo.
         * @summary Update Profile logo
         * @param {string} profileId Profile ID
         * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileLogoUpdate: (profileId, updateProfileLogoRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            (0, common_1.assertParamExists)('profileLogoUpdate', 'profileId', profileId);
            // verify required parameter 'updateProfileLogoRequest' is not null or undefined
            (0, common_1.assertParamExists)('profileLogoUpdate', 'updateProfileLogoRequest', updateProfileLogoRequest);
            const localVarPath = `/profiles/{profileId}/update-logo`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateProfileLogoRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update Profile section.
         * @summary Update Profile section
         * @param {string} profileId Profile ID
         * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileSectionUpdate: (profileId, updateProfileSectionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'profileId' is not null or undefined
            (0, common_1.assertParamExists)('profileSectionUpdate', 'profileId', profileId);
            // verify required parameter 'updateProfileSectionRequest' is not null or undefined
            (0, common_1.assertParamExists)('profileSectionUpdate', 'updateProfileSectionRequest', updateProfileSectionRequest);
            const localVarPath = `/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt_logged_in required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateProfileSectionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProfileApiAxiosParamCreator = ProfileApiAxiosParamCreator;
/**
 * ProfileApi - functional programming interface
 * @export
 */
const ProfileApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProfileApiAxiosParamCreator)(configuration);
    return {
        /**
         * Update Profile audio description.
         * @summary Update Profile audio description
         * @param {string} profileId Profile ID
         * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get profile details.
         * @summary Get profile details
         * @param {string} profileId Profile ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileDetails(profileId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileDetails(profileId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update Profile logo.
         * @summary Update Profile logo
         * @param {string} profileId Profile ID
         * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileLogoUpdate(profileId, updateProfileLogoRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileLogoUpdate(profileId, updateProfileLogoRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update Profile section.
         * @summary Update Profile section
         * @param {string} profileId Profile ID
         * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileSectionUpdate(profileId, updateProfileSectionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.profileSectionUpdate(profileId, updateProfileSectionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProfileApiFp = ProfileApiFp;
/**
 * ProfileApi - factory interface
 * @export
 */
const ProfileApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProfileApiFp)(configuration);
    return {
        /**
         * Update Profile audio description.
         * @summary Update Profile audio description
         * @param {string} profileId Profile ID
         * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options) {
            return localVarFp.profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get profile details.
         * @summary Get profile details
         * @param {string} profileId Profile ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileDetails(profileId, options) {
            return localVarFp.profileDetails(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Profile logo.
         * @summary Update Profile logo
         * @param {string} profileId Profile ID
         * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileLogoUpdate(profileId, updateProfileLogoRequest, options) {
            return localVarFp.profileLogoUpdate(profileId, updateProfileLogoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Profile section.
         * @summary Update Profile section
         * @param {string} profileId Profile ID
         * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileSectionUpdate(profileId, updateProfileSectionRequest, options) {
            return localVarFp.profileSectionUpdate(profileId, updateProfileSectionRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProfileApiFactory = ProfileApiFactory;
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
class ProfileApi extends base_1.BaseAPI {
    /**
     * Update Profile audio description.
     * @summary Update Profile audio description
     * @param {string} profileId Profile ID
     * @param {UpdateProfileAudioDescriptionRequest} updateProfileAudioDescriptionRequest Profile audio description Update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options) {
        return (0, exports.ProfileApiFp)(this.configuration).profileAudioDescriptionUpdate(profileId, updateProfileAudioDescriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get profile details.
     * @summary Get profile details
     * @param {string} profileId Profile ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileDetails(profileId, options) {
        return (0, exports.ProfileApiFp)(this.configuration).profileDetails(profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Profile logo.
     * @summary Update Profile logo
     * @param {string} profileId Profile ID
     * @param {UpdateProfileLogoRequest} updateProfileLogoRequest Profile Logo Update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileLogoUpdate(profileId, updateProfileLogoRequest, options) {
        return (0, exports.ProfileApiFp)(this.configuration).profileLogoUpdate(profileId, updateProfileLogoRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Profile section.
     * @summary Update Profile section
     * @param {string} profileId Profile ID
     * @param {UpdateProfileSectionRequest} updateProfileSectionRequest Profile Section Update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    profileSectionUpdate(profileId, updateProfileSectionRequest, options) {
        return (0, exports.ProfileApiFp)(this.configuration).profileSectionUpdate(profileId, updateProfileSectionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProfileApi = ProfileApi;
