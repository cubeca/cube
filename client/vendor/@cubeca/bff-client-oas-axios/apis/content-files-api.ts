/* tslint:disable */
/* eslint-disable */
/**
 * BFF - CUBE DAO Canada
 * # BFF (Backend-for-Frontend)  The BFF API caters to each and every whim of the Frontend, i.e. it receives, bundles, packages and formats data exactly as the Frontend needs it.  The actual implementation of the BFF will then in turn translate the Frontend traffic into whatever the specialized and semantically modular \"real\" backend services understand. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: raphaelhuefner@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddContent } from '../models';
// @ts-ignore
import { AddContentResponse } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
/**
 * ContentFilesApi - axios parameter creator
 * @export
 */
export const ContentFilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add content.
         * @summary Add content
         * @param {AddContent} addContent Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContent: async (addContent: AddContent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addContent' is not null or undefined
            assertParamExists('addContent', 'addContent', addContent)
            const localVarPath = `/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tus upload url from cloudflare.
         * @summary Get tus upload url from cloudflare
         * @param {string} uploadLength Upload length
         * @param {string} [uploadMetadata] Upload Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentUploadUrl: async (uploadLength: string, uploadMetadata?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadLength' is not null or undefined
            assertParamExists('contentUploadUrl', 'uploadLength', uploadLength)
            const localVarPath = `/content/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uploadLength != null) {
                localVarHeaderParameter['upload-length'] = String(uploadLength);
            }

            if (uploadMetadata != null) {
                localVarHeaderParameter['upload-metadata'] = String(uploadMetadata);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentFilesApi - functional programming interface
 * @export
 */
export const ContentFilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentFilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add content.
         * @summary Add content
         * @param {AddContent} addContent Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContent(addContent: AddContent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddContentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addContent(addContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tus upload url from cloudflare.
         * @summary Get tus upload url from cloudflare
         * @param {string} uploadLength Upload length
         * @param {string} [uploadMetadata] Upload Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentUploadUrl(uploadLength: string, uploadMetadata?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentUploadUrl(uploadLength, uploadMetadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContentFilesApi - factory interface
 * @export
 */
export const ContentFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentFilesApiFp(configuration)
    return {
        /**
         * Add content.
         * @summary Add content
         * @param {AddContent} addContent Add content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContent(addContent: AddContent, options?: any): AxiosPromise<AddContentResponse> {
            return localVarFp.addContent(addContent, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tus upload url from cloudflare.
         * @summary Get tus upload url from cloudflare
         * @param {string} uploadLength Upload length
         * @param {string} [uploadMetadata] Upload Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentUploadUrl(uploadLength: string, uploadMetadata?: string, options?: any): AxiosPromise<void> {
            return localVarFp.contentUploadUrl(uploadLength, uploadMetadata, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentFilesApi - interface
 * @export
 * @interface ContentFilesApi
 */
export interface ContentFilesApiInterface {
    /**
     * Add content.
     * @summary Add content
     * @param {AddContent} addContent Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentFilesApiInterface
     */
    addContent(addContent: AddContent, options?: AxiosRequestConfig): AxiosPromise<AddContentResponse>;

    /**
     * Get tus upload url from cloudflare.
     * @summary Get tus upload url from cloudflare
     * @param {string} uploadLength Upload length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentFilesApiInterface
     */
    contentUploadUrl(uploadLength: string, uploadMetadata?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ContentFilesApi - object-oriented interface
 * @export
 * @class ContentFilesApi
 * @extends {BaseAPI}
 */
export class ContentFilesApi extends BaseAPI implements ContentFilesApiInterface {
    /**
     * Add content.
     * @summary Add content
     * @param {AddContent} addContent Add content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentFilesApi
     */
    public addContent(addContent: AddContent, options?: AxiosRequestConfig) {
        return ContentFilesApiFp(this.configuration).addContent(addContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tus upload url from cloudflare.
     * @summary Get tus upload url from cloudflare
     * @param {string} uploadLength Upload length
     * @param {string} [uploadMetadata] Upload Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentFilesApi
     */
    public contentUploadUrl(uploadLength: string, uploadMetadata?: string, options?: AxiosRequestConfig) {
        return ContentFilesApiFp(this.configuration).contentUploadUrl(uploadLength, uploadMetadata, options).then((request) => request(this.axios, this.basePath));
    }
}
